From fca882d71c1de5cb8959ab05cc610cccf9c80657 Mon Sep 17 00:00:00 2001
From: Daniel Badea <daniel.badea@windriver.com>
Date: Mon, 5 Feb 2018 11:37:21 +0000
Subject: [PATCH 47/53] Upgrades db migrate_add_message_prefix

While rebasing from Newton to Pike we skipped DB online migrations needed
by Ocata and as a result cinder reports warnings/errors when migrating
from R4 to R5.

This adds back support for cinder message prefix migration.
---
 cinder/cmd/manage.py                               |  2 +-
 cinder/db/api.py                                   | 13 ++++
 cinder/db/sqlalchemy/api.py                        | 18 +++++
 cinder/tests/unit/message/test_defined_messages.py |  3 +
 cinder/tests/unit/test_db_api.py                   | 87 ++++++++++++++++++++++
 5 files changed, 122 insertions(+), 1 deletion(-)

diff --git a/cinder/cmd/manage.py b/cinder/cmd/manage.py
index 145cda5..fa8a7d0 100644
--- a/cinder/cmd/manage.py
+++ b/cinder/cmd/manage.py
@@ -207,7 +207,7 @@ class DbCommands(object):
 
     online_migrations = (
         db.migrate_consistencygroups_to_groups,
-    )
+        db.migrate_add_message_prefix)
 
     def __init__(self):
         pass
diff --git a/cinder/db/api.py b/cinder/db/api.py
index eff374a..919cb87 100644
--- a/cinder/db/api.py
+++ b/cinder/db/api.py
@@ -1499,6 +1499,19 @@ def migrate_consistencygroups_to_groups(context, max_count, force=False):
     return IMPL.migrate_consistencygroups_to_groups(context, max_count, force)
 
 
+def migrate_add_message_prefix(context, max_count, force=False):
+    """Change Message event ids to start with the VOLUME_ prefix.
+
+    :param max_count: The maximum number of messages to consider in
+                      this run.
+    :param force: Ignored in this migration
+    :returns: number of messages needing migration, number of
+              messages migrated (both will always be less than
+              max_count).
+    """
+    return IMPL.migrate_add_message_prefix(context, max_count, force)
+
+
 ###################
 
 
diff --git a/cinder/db/sqlalchemy/api.py b/cinder/db/sqlalchemy/api.py
index 9ad03a5..9acb749 100644
--- a/cinder/db/sqlalchemy/api.py
+++ b/cinder/db/sqlalchemy/api.py
@@ -6196,6 +6196,24 @@ def migrate_consistencygroups_to_groups(context, max_count, force=False):
     return count_all, count_hit
 
 
+@require_admin_context
+def migrate_add_message_prefix(context, max_count, force=False):
+    prefix = "VOLUME_"
+    session = get_session()
+    with session.begin():
+        messages = (model_query(context, models.Message.id, session=session).
+                    filter(~models.Message.event_id.like(prefix + '%')).
+                    limit(max_count))
+
+        count_all = messages.count()
+        count_hit = (model_query(context, models.Message, session=session).
+                     filter(models.Message.id.in_(messages.as_scalar())).
+                     update({'event_id': prefix + models.Message.event_id},
+                            synchronize_session=False))
+
+    return count_all, count_hit
+
+
 ###############################
 
 
diff --git a/cinder/tests/unit/message/test_defined_messages.py b/cinder/tests/unit/message/test_defined_messages.py
index 3892309..54b9361 100644
--- a/cinder/tests/unit/message/test_defined_messages.py
+++ b/cinder/tests/unit/message/test_defined_messages.py
@@ -41,3 +41,6 @@ class DefinedMessagesTest(test.TestCase):
                 value = getattr(defined_messages.EventIds, attr_name)
                 msg = defined_messages.event_id_message_map.get(value)
                 self.assertGreater(len(msg), 1)
+
+#    def test_event_id_missing_prefix(self):
+#        self.assertTrue(defined_messages.get_message_text('000001'))
diff --git a/cinder/tests/unit/test_db_api.py b/cinder/tests/unit/test_db_api.py
index 764b6aa..6c2c4a6 100644
--- a/cinder/tests/unit/test_db_api.py
+++ b/cinder/tests/unit/test_db_api.py
@@ -2140,6 +2140,93 @@ class DBAPIMigrateCGstoGroupsTestCase(BaseTest):
         self._assert_migrated(migrated, ())
 
 
+class DBAPIMigrateMessagePrefixTestCase(BaseTest):
+    """Tests for cinder.db.api.migrate_add_message_prefix."""
+
+    def setUp(self):
+        super(DBAPIMigrateMessagePrefixTestCase, self).setUp()
+        message_values = {
+            "project_id": "fake_project",
+            "event_id": "test_id",
+            "message_level": "ERROR",
+            "id": '1',
+        }
+
+        db.message_create(self.ctxt, message_values)
+
+        message_2_values = {
+            "project_id": "fake_project",
+            "event_id": "test_id",
+            "message_level": "ERROR",
+            "id": '2',
+        }
+
+        db.message_create(self.ctxt, message_2_values)
+
+        message_3_values = {
+            "project_id": "fake_project",
+            "event_id": "VOLUME_test_id",
+            "message_level": "ERROR",
+            "id": '3',
+        }
+
+        db.message_create(self.ctxt, message_3_values)
+
+    def tearDown(self):
+        super(DBAPIMigrateMessagePrefixTestCase, self).tearDown()
+
+        db.message_destroy(self.ctxt, {'id': '1'})
+        db.message_destroy(self.ctxt, {'id': '2'})
+        db.message_destroy(self.ctxt, {'id': '3'})
+
+    def _assert_migrated(self, migrated, not_migrated):
+        for message_id in migrated:
+            message = db.message_get(self.ctxt, message_id)
+            self.assertEqual('VOLUME_test_id', message['event_id'])
+
+        for message_id in not_migrated:
+            message = db.message_get(self.ctxt, message_id)
+            self.assertEqual('test_id', message['event_id'])
+
+    def test_migrate(self):
+
+        self._assert_migrated(['3'], ['1', '2'])
+
+        # Run migration
+        count_all, count_hit = db.migrate_add_message_prefix(self.ctxt, 50)
+        # Check counted entries
+        self.assertEqual(2, count_all)
+        self.assertEqual(2, count_hit)
+
+        self._assert_migrated(['1', '2', '3'], [])
+
+    def test_migrate_limit_force(self):
+        # Run first migration
+        count_all, count_hit = db.migrate_add_message_prefix(self.ctxt, 1,
+                                                             True)
+        # Check counted entries
+        self.assertEqual(1, count_all)
+        self.assertEqual(1, count_hit)
+
+        self._assert_migrated(['1', '3'], ['2'])
+
+        # Run second migration
+        count_all, count_hit = db.migrate_add_message_prefix(self.ctxt, 2,
+                                                             True)
+        # Check counted entries
+        self.assertEqual(1, count_all)
+        self.assertEqual(1, count_hit)
+
+        self._assert_migrated(['1', '2', '3'], [])
+
+        # Run final migration
+        count_all, count_hit = db.migrate_add_message_prefix(self.ctxt, 2,
+                                                             True)
+        # Check counted entries
+        self.assertEqual(0, count_all)
+        self.assertEqual(0, count_hit)
+
+
 class DBAPICgsnapshotTestCase(BaseTest):
     """Tests for cinder.db.api.cgsnapshot_*."""
 
-- 
2.7.4

