From 4d98b7204d0bc2f61226895e5d3669e29bd7d4a7 Mon Sep 17 00:00:00 2001
From: Daniel Badea <daniel.badea@windriver.com>
Date: Tue, 18 Jul 2017 14:37:29 +0000
Subject: [PATCH 25/53] Pike Rebase: Volume monitor update service status file
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

cinder volume monitor: don't use keystone and cinderclient

It was discovered that cinder-volume
monitor is run every minute and can occupy between 20% â€“ 50% of a
core. The Python interpreter is launched from its OCF script to run
a piece of python code which entails getting cgcs passwd->auth
token->session to create a cinder client in order to get the status
of all running cinder volumes.

Solution:
  - when a cinder service (including cinder-volume) updates its
    state in the database it also updates a file in tsconfig
    VOLATILE_PATH with the UTC time stamp of the deadline before
    declaring the service down

  - OCF monitoring script reads the file and compares with current
    time (now). If the deadline is less than current time then
    the service is reported down

  - cinder service writes to a ".down-after.new" file then
    renames it to ".down-after" because rename is atomic and
    prevents race between reads and writes on the status file

---
 cinder/service.py | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/cinder/service.py b/cinder/service.py
index 0cc42e1..01c6078 100644
--- a/cinder/service.py
+++ b/cinder/service.py
@@ -18,10 +18,16 @@
 """Generic Node base class for all workers that run on hosts."""
 
 
+import datetime
 import inspect
 import os
 import random
 import signal
+import six
+try:
+    from tsconfig import tsconfig
+except ImportError:
+    tsconfig = type("", (), dict(VOLATILE_PATH=""))
 
 from oslo_concurrency import processutils
 from oslo_config import cfg
@@ -524,6 +530,7 @@ class Service(service.Service):
                 service_ref.availability_zone = self.availability_zone
 
             service_ref.save()
+            self.update_service_down_after(service_ref)
 
             # TODO(termie): make this pattern be more elegant.
             if getattr(self, 'model_disconnected', False):
@@ -551,6 +558,26 @@ class Service(service.Service):
         self.manager.reset()
         super(Service, self).reset()
 
+    @staticmethod
+    def update_service_down_after(service_ref):
+        # Use:
+        #   [[ "$(date -u +'%Y-%m-%d %H:%M:%S.%N')"
+        #      < "$(cat /var/run/cinder-volume.down-after)" ]]
+        # from cinder volume monitoring script to check service is up
+        new_file = os.path.join(tsconfig.VOLATILE_PATH,
+                                '{}.down-after.new'.format(service_ref.binary))
+        try:
+            with open(new_file, 'w') as update:
+                update.write(
+                    (service_ref.updated_at + datetime.timedelta(
+                        seconds=CONF.service_down_time)
+                     ).strftime("%Y-%m-%d %H:%M:%S.%f"))
+            os.rename(new_file,
+                      os.path.join(tsconfig.VOLATILE_PATH,
+                                   '{}.down-after'.format(service_ref.binary)))
+        except Exception as e:
+            LOG.error('Update service state failed: %s', six.text_type(e))
+
 
 class WSGIService(service.ServiceBase):
     """Provides ability to launch API from a 'paste' configuration."""
-- 
2.7.4

